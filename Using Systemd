Linux system unit configuration files location:
/lib/systemd/system 
/etc/systemd/system 


There are eight systemd unit types:
■ automount
■ device
■ mount
■ path
■ service:    A service unit is for managing daemons on your Linux server.
■ snapshot
■ socket
■ target:     A target unit is simply a group of other units.

# systemctl list-units | grep .service   or     | grep .target
# systemctl list-unit-files --type=service     or    --type=target

# cat /lib/systemd/system/sshd.service    (check out a config file *.service)
Description: A free-form description of the service.

After: lists units that should be activated before this service is started.

Environment File: The service’s configuration file.

ExecStart: The command used to start this service.

ExecReload: The command used to reload this service.

WantedBy: The target unit this service belongs to.

# cat /lib/systemd/system/multi-user.target   (This config has added parameters)
Requires: If this multi-user.target gets activated, the listed target unit is
also activated. If the listed target unit is deactivated or fails, then multi-user.
target is deactivated. If there are no After and Before options, then both multiuser.
target and listed target unit activate simultaneously.

AllowIsolate: If set to yes, then this target unit, multi-user.target,
is activated along with its dependencies and all others are deactivated.

Conflicts: This setting avoids conflicts in services. Starting multi-user.
target stops the listed targets and services, and vice-versa.

View units that a target unit will activate.
# systemctl show --property "Wants" multi-user.target \ | fmt -10 | sed 's/Wants=//g' | sort

View units a target unit must activate or requires because that unit will fail.
# systemctl show --property "Requires" multi-user.target

See all the services that are being offered by a Linux server using systemd
# systemctl list-unit-files --type=service | grep -v disabled
# systemctl status cups.service
# systemctl stop cups.service
# systemctl start cups.service     : Use this when you need service right now, but will not persist after reboot.
# systemctl restart cups.service
# systemctl condrestart cups.service     : Conditional restart only restarts a service if it is currently running.
# systemctl reload sshd.service    : Doing a reload on a service, instead of a restart, prevents any pending service operations from being aborted.
# systemctl enable cups.service    : This service will now persist after reboot. 


# systemctl status cups.service  (Using SysVinit services)
# service cups start or stop or restart or status or reload (Use to restart to service and the service will not shut down)
# systemctl disable cups.service


